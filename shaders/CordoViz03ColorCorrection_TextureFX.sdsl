[TextureSource]
[Category("Source")]
[Summary("")]
shader CordoViz03ColorCorrection_TextureFX : TextureFX , Global
{
SamplerState samplerState
{
Filter = MIN_MAG_MIP_LINEAR;
};
float map(float value, float min1, float max1, float min2, float max2) {
return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
float fade;
float longEx;
float effetzoom;
float zoom;
float XPose;
float poigne;
float genoux;
float droit;
float imgMin;float imgMax; float expo;
float minMaskBlurImg;float maxMaskBlurImg; float minMaskBlurVid; float maxMaskBlurVid;
float blur; float blurQuality;float texBlur; float vidBlur;
float saturation; float variationHue; float globalHue; float3 sha; float3 mid; float3 hig; float noise;
float2 res;
float3 InvLerp(float3 A, float3 B, float3 t){return (t - A) / (B - A);}
float3 co(float3 InColor ,float3 s, float3 m, float3 h){
    float3 OffShadows  = InColor + s;
    float3 OffMidtones = InColor + m;
    float3 OffHilights = InColor + h;
    return lerp(
        lerp(OffShadows,  OffMidtones, InvLerp(float3(0.0, 0.0, 0.0), float3(0.5, 0.5, 0.5), InColor)),
        lerp(OffMidtones, OffHilights, InvLerp(float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0), InColor)),
        step( float3(0.5, 0.5, 0.5), InColor));
}
float ov(float a, float b) {
    return a<0.5?(2.0*a*b):(1.0-2.0*(1.0-a)*(1.0-b));}
float3 ov3(float3 a, float3 b){
    return float3(ov(a.x,b.x),ov(a.y,b.y),ov(a.z,b.z));}

    float rd(float t){return frac(sin(dot(floor(t),45.236))*7845.236+Time*0.5);}
float no(float t){return lerp(rd(t),rd(t+1.),smoothstep(0.,1.,frac(t)));}

float desat(float3 color)
{
   float3 lum = float3(0.299, 0.587, 0.114);
   float d1 = dot(lum, color);

   return d1;
}
    stage override float4 Shading()
    {
    float2 uv = (streams.TexCoord.xy);
    float2 pp0 = Texture0.SampleLevel(samplerState, float2(0.91,0.05), 0);
    float2 p0 = float2(pp0.x,1.-pp0.y);
    float2 pp1 = Texture0.SampleLevel(samplerState, float2(0.93,0.05), 0);
    float2 p1 = float2(pp1.x,1.-pp1.y);
    float2 pp2 = Texture0.SampleLevel(samplerState, float2(0.95,0.05), 0);
    float2 p2 = float2(pp2.x,1.-pp2.y);
    float2 pp3 = Texture0.SampleLevel(samplerState, float2(0.97,0.05), 0);
    float2 p3 = float2(pp3.x,1.-pp3.y);
    float2 pp4 = Texture0.SampleLevel(samplerState, float2(0.99,0.05), 0);
    float2 p4 = float2(pp4.x,1.-pp4.y);
    float2 pf = lerp(lerp(p0,lerp(p1,p2,clamp(droit,0.,1.)),clamp(poigne,0.,1.)),lerp(p3,p4,clamp(droit,0.,1.)),clamp(genoux,0.,1.));
    float2 uz = frac(float2(map(uv.x,0.,1.,pf.x-zoom,pf.x+zoom),map(uv.y,0.,1.,pf.y-zoom,pf.y+zoom)));
    float2 re = res;
    float bq = clamp(blurQuality,0.2,2.);
      float Directions = 16.0*bq; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
      float Quality = 4.0*bq; // BLUR QUALITY (Default 4.0 - More is better but slower)
      float mt = (smoothstep(minMaskBlurImg,maxMaskBlurImg,Texture3.SampleLevel(samplerState, uv,0).x)-.5)*10.*texBlur;
        float mt2 = (smoothstep(minMaskBlurVid,maxMaskBlurVid,desat(Texture4.SampleLevel(samplerState, uv,0).xyz))-.5)*10.*vidBlur;
        float2 Radius =lerp(10.*blur+mt,-10.*blur-mt+mt2,smoothstep(0.2,0.8, no(uv.x*7.+45.6)))/re;
      //float2 Radius =lerp(-100.,100.,smoothstep(0.2,0.8, no(uv.x*7.+45.6)))*blur/re;
      float c;
      uz = lerp(uv,uz+float2(XPose,0.),effetzoom);
      for( float d=0.0; d<Pi; d+=Pi/Directions)
      {
          for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)
          {
              float2 md = float2(cos(d*2.),sin(d*2.));
              c +=Texture0.SampleLevel(samplerState, uz+md*Radius*i*1.9,0).x;
          }
      }
      c /= Quality * Directions - (Directions-1.);
      float3 c2 = lerp(float3(1.,1.,1.),clamp(3.*abs(1.-2.*frac(c*variationHue+globalHue+float3(0.,-1./3.,1./3.)))-1.,0.,1.),saturation)*smoothstep(imgMin,imgMax,pow(c,expo));
      float3 r = co(c2,sha,mid,hig);
      float2 un = frac(uv);
      float tau = 3.14159265*2.;
      float3 noi = sin(Texture1.SampleLevel(samplerState, frac(uv*re/1024.), 0).xyz*tau*6.+Time*6.)*0.5+0.5;
      float3 r2 = ov3(r,lerp(noi,0.5,noise));
      float3 r3 = max(r2,Texture2.SampleLevel(samplerState,uv,0).xyz*clamp(longEx,0.,1.));
      return float4(r3*fade,1.);

    }
};
