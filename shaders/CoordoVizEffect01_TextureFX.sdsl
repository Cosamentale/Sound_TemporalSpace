[TextureSource]
[Category("Source")]
[Summary("")]
shader CoordoVizEffect01_TextureFX : TextureFX
{
SamplerState samplerState
{
Filter = MIN_MAG_MIP_LINEAR;
};
float map(float value, float min1, float max1, float min2, float max2) {
return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
float zoom;
float poigne;
float genoux;
float droit;
float noir1;
float blanc1;
float exposure1;
float noir2;
float blanc2;
float exposure2;
float contrastN;
float contrastB;
float blurmask;
float blur;
float bluramout;
float blurQuality;
float effecto;
    stage override float4 Shading()
    {
    float2 uv = (streams.TexCoord.xy);
    float2 pp0 = Texture0.SampleLevel(samplerState, float2(0.91,0.05), 0);
    float2 p0 = float2(pp0.x,1.-pp0.y);
    float2 pp1 = Texture0.SampleLevel(samplerState, float2(0.93,0.05), 0);
    float2 p1 = float2(pp1.x,1.-pp1.y);
    float2 pp2 = Texture0.SampleLevel(samplerState, float2(0.95,0.05), 0);
    float2 p2 = float2(pp2.x,1.-pp2.y);
    float2 pp3 = Texture0.SampleLevel(samplerState, float2(0.97,0.05), 0);
    float2 p3 = float2(pp3.x,1.-pp3.y);
    float2 pp4 = Texture0.SampleLevel(samplerState, float2(0.99,0.05), 0);
    float2 p4 = float2(pp4.x,1.-pp4.y);
    float2 pf = lerp(lerp(p0,lerp(p1,p2,clamp(droit,0.,1.)),clamp(poigne,0.,1.)),lerp(p3,p4,clamp(droit,0.,1.)),clamp(genoux,0.,1.));
    float2 uz = float2(map(uv.x,0.,1.,pf.x-zoom,pf.x+zoom),map(uv.y,0.,1.,pf.y-zoom,pf.y+zoom));

    float2 re = float2(1920.,1080.);
    float cb = clamp(blurQuality,0.1,2.);
    float Directions = 32.0*cb; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
    float Quality = 8.0*cb; // BLUR QUALITY (Default 4.0 - More is better but slower)
    float2 Radius = bluramout*lerp(blurmask*100.,blur*100.,smoothstep(contrastN,contrastB,Texture1.SampleLevel(samplerState, frac(uv*re/1024.),0).x))/re;
    float4 Color =float4(0.,0.,0.,0.);

    for( float d=0.0; d<Pi; d+=Pi/Directions)
    {
        for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)
        {
            Color +=Texture0.SampleLevel(samplerState, uz+float2(cos(d*2.),sin(d*2.))*Radius*i,0);
        }
    }
    Color /= Quality * Directions - (Directions-1.);

            float4 c =Color;
            float r1 = smoothstep(noir1,blanc1,pow(c.x,exposure1));
            float r2 = smoothstep(noir2,blanc2,pow(c.x,exposure2));
            float r3 = lerp(r1,1.-r1,r2*effecto);
            return float4(r3,r3,r3,1.);


    }
};
