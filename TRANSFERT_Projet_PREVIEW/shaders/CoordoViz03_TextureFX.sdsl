[TextureSource]
[Category("Source")]
[Summary("")]
shader CoordoViz03_TextureFX : TextureFX , Global
{
SamplerState samplerState
{
Filter = MIN_MAG_MIP_LINEAR;
AddressU = MIRROR;
AddressV = MIRROR;
};
float blur;
float saturation;
float variationHue;
float globalHue;
float3 sha;
float3 mid;
float3 hig;
float noise;
float minMaskBlurImg;
float maxMaskBlurImg;
float minMaskBlurVid;
float maxMaskBlurVid;
float texBlur;float vidBlur;
float3 InvLerp(float3 A, float3 B, float3 t){return (t - A) / (B - A);}
float3 co(float3 InColor ,float3 s, float3 m, float3 h){
    float3 OffShadows  = InColor + s;
    float3 OffMidtones = InColor + m;
    float3 OffHilights = InColor + h;
    return lerp(
        lerp(OffShadows,  OffMidtones, InvLerp(float3(0.0, 0.0, 0.0), float3(0.5, 0.5, 0.5), InColor)),
        lerp(OffMidtones, OffHilights, InvLerp(float3(0.5, 0.5, 0.5), float3(1.0, 1.0, 1.0), InColor)),
        step( float3(0.5, 0.5, 0.5), InColor));
}
float ov(float a, float b) {
    return a<0.5?(2.0*a*b):(1.0-2.0*(1.0-a)*(1.0-b));}
float3 ov3(float3 a, float3 b){
    return float3(ov(a.x,b.x),ov(a.y,b.y),ov(a.z,b.z));}

    float rd(float t){return frac(sin(dot(floor(t),45.236))*7845.236+Time*0.5);}
float no(float t){return lerp(rd(t),rd(t+1.),smoothstep(0.,1.,frac(t)));}
    stage override float4 Shading()
    {
       float tau = 3.14159265*2.;
        float2 uv = streams.TexCoord.xy;
        float2 re = float2(1920.,1080.);
        float Directions = 32.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
        float Quality = 8.0; // BLUR QUALITY (Default 4.0 - More is better but slower)
        float mt = (smoothstep(minMaskBlurImg,maxMaskBlurImg,Texture3.SampleLevel(samplerState, uv,0).x)-.5)*100.*texBlur;
        float mt2 = (smoothstep(minMaskBlurVid,maxMaskBlurVid,Texture4.SampleLevel(samplerState, uv,0).x)-.5)*100.*vidBlur;
        float2 Radius =lerp(100.*blur+mt,-100.*blur-mt+mt2,smoothstep(0.2,0.8, no(uv.x*7.+45.6)))/re;
        //float2 Radius =lerp(100.,-100.,sin(Texture3.SampleLevel(samplerState, uv+Time*0.1,0).x*tau+Time*4.))*blur/re;
        float c;
        for( float d=0.0; d<Pi; d+=Pi/Directions)
        {
            for(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)
            {
                float2 md = float2(cos(d*2.),sin(d*2.));
                c +=Texture0.SampleLevel(samplerState, uv+md*Radius*i*1.9,0).x;
            }
        }
        c /= Quality * Directions - (Directions-1.);
        float3 c2 = lerp(float3(1.,1.,1.),clamp(3.*abs(1.-2.*frac(c*variationHue+globalHue+float3(0.,-1./3.,1./3.)))-1.,0.,1.),saturation)*c;
        float3 r = co(c2,sha,mid,hig);
        float2 un = frac(uv);

        float3 noi = sin(Texture1.SampleLevel(samplerState, frac(uv*re/1024.), 0).xyz*tau*6.+Time*6.)*0.5+0.5;
        float3 r2 = ov3(r,lerp(noi,0.5,noise));
        float3 r3 = max(r2,Texture2.SampleLevel(samplerState, uv,0).xyz*0.95);
        return float4(r3,1.);
    }
};
