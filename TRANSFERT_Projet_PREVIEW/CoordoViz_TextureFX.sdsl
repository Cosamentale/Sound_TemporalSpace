[TextureSource]
[Category("Source")]
[Summary("")]
shader CoordoViz_TextureFX : TextureFX
{
SamplerState samplerState
{
Filter = MIN_MAG_MIP_LINEAR;
};
float map(float value, float min1, float max1, float min2, float max2) {
return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}
float zoom;
float poigne;
float genoux;
float droit;

    stage override float4 Shading()
    {
    float2 uv = (streams.TexCoord.xy);
    float2 pp0 = Texture0.SampleLevel(samplerState, float2(0.91,0.05), 0);
    float2 p0 = float2(pp0.x,1.-pp0.y);
    float2 pp1 = Texture0.SampleLevel(samplerState, float2(0.93,0.05), 0);
    float2 p1 = float2(pp1.x,1.-pp1.y);
    float2 pp2 = Texture0.SampleLevel(samplerState, float2(0.95,0.05), 0);
    float2 p2 = float2(pp2.x,1.-pp2.y);
    float2 pp3 = Texture0.SampleLevel(samplerState, float2(0.97,0.05), 0);
    float2 p3 = float2(pp3.x,1.-pp3.y);
    float2 pp4 = Texture0.SampleLevel(samplerState, float2(0.99,0.05), 0);
    float2 p4 = float2(pp4.x,1.-pp4.y);
    float2 pf = lerp(lerp(p0,lerp(p1,p2,clamp(droit,0.,1.)),clamp(poigne,0.,1.)),lerp(p3,p4,clamp(droit,0.,1.)),clamp(genoux,0.,1.));
    float2 uz = float2(map(uv.x,0.,1.,pf.x-zoom,pf.x+zoom),map(uv.y,0.,1.,pf.y-zoom,pf.y+zoom));
    float4 col = Texture0.SampleLevel(samplerState, uz, 0);
    return col;

    }
};
